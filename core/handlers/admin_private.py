import json
import os
import uuid
from aiogram import Bot, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession

from core.database.models import User, Card
from core.database import orm_query as orm
from core.filters import IsAdmin


from core.keyboards import get_callback_btns


admin_router = Router()
admin_router.message.filter(IsAdmin())

admin_main_kb = get_callback_btns(
    btns={
        "–ö–∞—Ä—Ç—ã": "edit_cards",
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "edit_notifications",
        "–õ–∏–º–∏—Ç—ã": "edit_limits",
        "–í–Ω–µ—à–Ω—ã–µ —Å—Å—ã–ª–∫–∏": "external_links",
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "statistics",
    },
)

DAYS = [
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–í—Ç–æ—Ä–Ω–∏–∫",
    "–°—Ä–µ–¥–∞",
    "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ü—è—Ç–Ω–∏—Ü–∞",
    "–°—É–±–±–æ—Ç–∞",
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
]


@admin_router.message(Command("admin"))
async def admin_features(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=admin_main_kb)


@admin_router.callback_query(F.data == "admin")
async def callback_admin_features(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=admin_main_kb)


@admin_router.callback_query(F.data == "edit_cards")
async def callback_edit_cards(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    all_cards = await orm.orm_read(session=session, model=Card)
    btns = {}
    text = "–ö–∞—Ä—Ç–æ—á–∫–∏"

    if all_cards is False:
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")
        await admin_features(callback.message, state)
        return

    if all_cards:
        for card in all_cards:
            btns[
                f"{card.description[:40]}{'...' if card.description and len(card.description) > 30 else ''}"
            ] = f"card_{card.pk}"
    else:
        text = "–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫"

    btns["–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"] = "add_card"
    btns["–ù–∞–∑–∞–¥"] = "admin"

    if callback.message.photo:
        await callback.message.delete()
        await callback.message.answer(
            text=text, reply_markup=get_callback_btns(btns=btns, sizes=(1,))
        )
    else:
        await callback.message.edit_text(
            text=text, reply_markup=get_callback_btns(btns=btns, sizes=(1,))
        )


async def edit_cards(message: Message, session: AsyncSession, text: str = None):
    all_cards = await orm.orm_read(session=session, model=Card)
    btns = {}

    if not text:
        text = "–ö–∞—Ä—Ç–æ—á–∫–∏"

    if all_cards:
        for card in all_cards:
            btns[
                f"{card.description[:40]}{'...' if card.description and len(card.description) > 30 else ''}"
            ] = f"card_{card.pk}"
    else:
        text = "–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ üòû"

    btns["–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"] = "add_card"
    btns["–ù–∞–∑–∞–¥"] = "admin"

    await message.answer(
        text=text, reply_markup=get_callback_btns(btns=btns, sizes=(1,))
    )


@admin_router.callback_query(F.data.startswith("card_"))
async def callback_card(callback: CallbackQuery, session: AsyncSession):
    pk = int(callback.data.split("_")[1])
    card = await orm.orm_read(session=session, model=Card, pk=pk)
    photo = FSInputFile(card.image, filename="card.jpg")
    btns = get_callback_btns(
        btns={
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ": f"edit_card_{card.pk}",
            "–£–¥–∞–ª–∏—Ç—å": f"delete_card_{card.pk}",
            "–ù–∞–∑–∞–¥": "edit_cards",
        },
        sizes=(1,),
    )

    await callback.message.delete()
    await callback.message.answer_photo(
        photo=photo, caption=card.description, reply_markup=btns
    )


class EditDesc(StatesGroup):
    description = State()


# EDIT CARD DESCRIPTION
@admin_router.callback_query(F.data.startswith("edit_card_"))
async def callback_edit_card(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    pk = int(callback.data.split("_")[2])
    card = await orm.orm_read(session=session, model=Card, pk=pk)

    await callback.answer()
    await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    await state.set_data({"card": card})
    await state.set_state(EditDesc.description)


# EDIT CARD STATE DESCRIPTION
@admin_router.message(EditDesc.description)
async def edit_card_description(
    message: Message, state: FSMContext, session: AsyncSession
):
    data = await state.get_data()
    card = data["card"]
    await orm.orm_update(
        session=session, model=Card, pk=card.pk, data={"description": message.text}
    )
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
    await edit_cards(message, session=session)


# DELETE CARD
@admin_router.callback_query(F.data.startswith("delete_card_"))
async def callback_delete_card(callback: CallbackQuery, session: AsyncSession):
    pk = int(callback.data.split("_")[2])
    await orm.orm_delete(session=session, model=Card, pk=pk)
    result = await callback.message.delete()

    if result:
        await callback.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        await edit_cards(callback.message, session=session)
    else:
        await callback.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ üòû...")


class AddCard(StatesGroup):
    description = State()
    image = State()


# ADD CARD
@admin_router.callback_query(F.data == "add_card")
async def callback_add_card(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")

    await state.set_state(AddCard.description)


# ADD CARD STATE DESCRIPTION
@admin_router.message(AddCard.description)
async def add_card_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É")
    await state.set_state(AddCard.image)


# ADD CARD STATE IMAGE
@admin_router.message(AddCard.image, F.photo)
async def add_card_image(message: Message, state: FSMContext, session: AsyncSession):
    desc = await state.get_value("description")

    unique_filename = str(uuid.uuid4()) + ".jpg"
    file_path = os.path.join("images", unique_filename)

    await message.bot.download(file=message.photo[-1].file_id, destination=file_path)

    data = {
        "description": desc,
        "image": file_path,
    }

    await orm.orm_create(
        session,
        Card,
        data,
    )

    await state.clear()
    await edit_cards(message, session, text="–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")


@admin_router.callback_query(F.data == "external_links")
async def callback_external_links(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    btns = get_callback_btns(
        btns={
            "–ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—ã": "buy_cards_link",
            "–î–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç": "full_card_link",
            "–ù–∞–∑–∞–¥": "admin",
        },
        sizes=(1,),
    )

    await callback.message.edit_text(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è...", reply_markup=btns)


class ChangeLink(StatesGroup):
    link_buy_cards = State()
    link_full_pack = State()


back_to_external_links = get_callback_btns(
    btns={
        "–ù–∞–∑–∞–¥": "external_links",
    },
    sizes=(1,),
)


@admin_router.callback_query(F.data == "buy_cards_link")
async def callback_buy_cards_link(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É", reply_markup=back_to_external_links
    )
    await state.set_state(ChangeLink.link_buy_cards)


@admin_router.message(ChangeLink.link_buy_cards)
async def change_buy_cards_link(
    message: Message, state: FSMContext, session: AsyncSession
):
    url = message.text

    if not url.startswith("https://") and not url.startswith("http://"):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É", reply_markup=back_to_external_links
        )
        await state.set_state(ChangeLink.link_buy_cards)
        return

    try:
        with open("config.json", "r") as f:
            data = json.load(f)
    except json.JSONDecodeError:
        data = {}

    data["buy_cards_link"] = url

    with open("config.json", "w") as f:
        json.dump(data, f)

    await message.answer("–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
    await admin_features(message, state)


@admin_router.callback_query(F.data == "full_card_link")
async def callback_full_card_link(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É", reply_markup=back_to_external_links
    )
    await state.set_state(ChangeLink.link_full_pack)


@admin_router.message(ChangeLink.link_full_pack)
async def change_full_card_link(
    message: Message, state: FSMContext, session: AsyncSession
):
    url = message.text

    if not url.startswith("https://") and not url.startswith("http://"):
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É", reply_markup=back_to_external_links
        )
        await state.set_state(ChangeLink.link_full_pack)
        return

    try:
        with open("config.json", "r") as f:
            data = json.load(f)
    except json.JSONDecodeError:
        data = {}

    data["full_card_link"] = url

    with open("config.json", "w") as f:
        json.dump(data, f)

    await message.answer("–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
    await admin_features(message, state)


# NOTIFICATIONS
@admin_router.callback_query(F.data == "edit_notifications")
async def callback_edit_notifications(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    btns = get_callback_btns(
        btns={
            "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è": "change_time",
            "–ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏": "change_days",
            "–ù–∞–∑–∞–¥": "admin",
        },
        sizes=(1,),
    )

    await callback.message.edit_text(text="–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=btns)


# CHANGE TIME MENU
@admin_router.callback_query(F.data == "change_time")
async def callback_change_time(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    hour_btns = {
        "–ù–∞–∑–∞–¥": "edit_notifications",
    }

    for hour in range(6, 23):  # –í—ñ–¥ 6:00 –¥–æ 22:00 (22 –≤–∫–ª—é—á–Ω–æ)
        hour_btns[f"{hour:02d}:00"] = f"change_time_{hour}"

    with open("config.json", "r") as f:
        data = json.load(f)

    hour = data.get("notification_time")

    if hour:
        await callback.message.edit_text(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {hour:02d}:00",
            reply_markup=get_callback_btns(
                btns=hour_btns,
                sizes=(1, 3),
            ),
        )
    else:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è",
            reply_markup=get_callback_btns(
                btns=hour_btns,
                sizes=(
                    1,
                    3,
                ),
            ),
        )


# SELECT TIME
@admin_router.callback_query(F.data.startswith("change_time_"))
async def callback_change_time(callback: CallbackQuery, state: FSMContext):
    hour = int(callback.data.split("_")[2])

    with open("config.json", "r") as f:
        data = json.load(f)

    data["notification_time"] = hour

    with open("config.json", "w") as f:
        json.dump(data, f)

    await callback.answer("–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ")
    await callback_admin_features(callback, state)


# CHANGE DAYS MENU
@admin_router.callback_query(F.data == "change_days")
async def callback_change_days(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    with open("config.json", "r") as f:
        data = json.load(f)

    days = data.get("notification_days")
    days_btns = {"–ù–∞–∑–∞–¥": "edit_notifications"}

    for i, day in enumerate(DAYS):
        if str(i) in days:
            days_btns[f"{day} ‚úÖ"] = f"change_day_{i}"
        else:
            days_btns[day] = f"change_day_{i}"

    btns = get_callback_btns(
        btns=days_btns,
        sizes=(1, 2),
    )

    await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏", reply_markup=btns)


# SELECT DAY
@admin_router.callback_query(F.data.startswith("change_day_"))
async def callback_change_day_status(callback: CallbackQuery, state: FSMContext):
    day = callback.data.split("_")[2]

    with open("config.json", "r") as f:
        data = json.load(f)

    if data.get("notification_days") is None:
        data["notification_days"] = [day]
    elif day not in data["notification_days"]:
        data["notification_days"].append(day)
    else:
        data["notification_days"].remove(day)

    with open("config.json", "w") as f:
        json.dump(data, f)

    await callback.answer("–î–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω")
    await callback_change_days(callback, state)
